#!/bin/bash

die () {
	echo $0
	exit 1
}

#Source the settings
. /etc/emerge-sync.conf

# Exit automatically if any error escapes our capturing
# Also, print commands.  Since run-crons swallows output, good for debugging
if [ "$VERBOSE" == "true" ]
then
	set -e -x
fi

echo "start to updates"

KERNELHASSYMLINK=0

if [ "$UPDATEKERNEL" = "true" ]
then
  for KERNEL in `equery l '*-sources*' | grep 'sys-kernel' | awk -F'[/-]' '{printf "%s-%s\n", $3, $4}' | sort | uniq`
  do
    if [ `equery --quiet u $KERNEL | grep '+symlink' | wc -l ` -eq 0 ]
      then echo "WARNING: Kernel $KERNEL does not have symlink flag set"
    else
      KERNELHASSYMLINK=1
    fi
  done
  if [ $KERNELHASSYMLINK -eq 0 ]
	then
	  echo "WARNING: No kernel has the symlink use flag set!  This means we likely WILL NOT build the right kernel version.  Consider setting the symlink use flag or turning off kernel auto-update.  If you set the use flag, be sure to update the active kernel version via 'equery kernel set'."
	fi
fi

INSTALLEDVERSIONS=`emerge --search '%@sys-kernel/.*-sources' | grep 'Latest version installed' | grep -v '\[ Not Installed \]' | sed -e 's/^ *//' -e 's/ *$//' | cut -f 4 -d ' '`
RUNNINGVER=`uname -r | cut -d'-' -f 1`

# This left out so yoou get nice warnings if theres akernel update, even if this script isnt managing it
if [ `echo "${INSTALLEDVERSIONS}" | grep "${RUNNINGVER}" | wc -l ` -eq 0 ]; then
	echo "WARNING: Running kernel does not match installed kernel.  This likely results if you had a new kernel installed but have not yet built or rebooted"
fi


echo "sync to gentoo repositories"
emerge --sync -q

#Check if theres even work to do.
WORK=`emerge -qupDN --autounmask-write @world`
if [ -n "$WORK" ]
then
	echo "start update to all packages"
	emerge -quDN --autounmask-write @world
fi

#If kernel checking/building enabled, do it here
if [ "$CHECKKERNEL" = "true" ]; then
	#INSTALLEDRAW=`equery -q l -F '$name: $version' 'sys-kernel/*' | grep sources`
	#INSTALLEDPKG=`echo "${INSTALLEDRAW}" | grep sources | awk -F : '{print $1}'`
	#INSTALLEDVER=`echo "${INSTALLEDRAW}" | grep sources | awk -F : '{print $2}'`
	#INSTALLEDVER=`eselect kernel show | head -n -1 | tail -n 1 |  cut -d/ -f 4- | cut -d- -f 2-`
	
	# We could have multiple versions of the kernel installed. And gentoo
	# Doesn't have a consistant way to work from the name to the ebuild it
	# came from.  So instead we'll just check if the running version is the
	# latest for ANY installed kernel
	INSTALLEDVERSIONS=`emerge --search '%@sys-kernel/.*-sources' | grep 'Latest version installed' | grep -v '\[ Not Installed \]' | sed -e 's/^ *//' -e 's/ *$//' | cut -f 4 -d ' '`
	RUNNINGVER=`uname -r | cut -d'-' -f 1`
	
	#Grepping the string that came back is better than dealing with bash
	# arrays.  Looks for how many lines in the 'latest' list match the
	# running kernel.  If none, we need to update.
	if [ `echo "${INSTALLEDVERSIONS}" | grep "${RUNNINGVER}" | wc -l ` -eq 0 ]; then
		if [ "$UPDATEKERNEL" = "true" ]; then
			echo "**AUTOUPDATING KERNEL**"
			cd /usr/src/linux #where we want to be
			make clean # clean up for sanity

			#Remove anything laying about
			rm -f .config

			#Copy in previous config TODO: use default if unable to copy?
			gzip -dc /proc/config.gz > .config || cp /usr/src/linux-`uname -r`/.config . || (echo "Could not copy old kernel config"; break)

			#decide between genkernel and "manual"
			if [ `which genkernel` -a -x `which genkernel` ]; then
				genkernel --oldconfig --kernel-config=.config all || die "Genkernel failed!"
			else
				make olddefconfig || die "Could not automatically update configuration"
				make modules_prepare || die "Modules_prepare failed with $?"
				emerge @module-rebuild || die "Modules rebuild failed with $?"
				make -j5 || die "Build failed with $?"
				make modules_install || die "Module installation failed with $?"
				# Will update symlinks so bootloader uses new kernel
				make install || die "Install failed with $?" 
			fi
			
			#We check this each time.  It doesnt take much time and covers a 
			#whole multitude of possibilites
			echo "Rebuild modules"
			emerge -quDN @module-rebuild
			echo "Update bootloader"
			if [ -n "$(which grub2-mkconfig)" ]
			then
				grub2-mkconfig -o /boot/grub/grub.cfg
			elif [ -n "$(which grub-mkconfig)" ]
			then
				grub-mkconfig -o /boot/grub/grub.cfg
			else
				echo "Update not performed; please do manually"
			fi
			echo "**KERNEL UPDATE PERFORMED, CONSIDER REBOOT**"
		else
			echo "** KERNEL UPDATE AVAILABLE **"
		fi
	fi
fi

if [ -n "$WORK" ]
then
	if [ `which python-updater` -a -x `which python-updater` ]; then
		echo "Rebuild python packages which require it"
		python-updater
	else
		echo "python-updater not installed, not rebuilding python packages which require it.  Emerge python-updater to run"
	fi

	if [ `which perl-cleaner` -a -x `which perl-cleaner` ]; then
		echo "Rebuild perl modules which require it"
		perl-cleaner --all
	else
		echo "perl-cleaner not installed, not rebuilding modules that require rebuilding.  Emerge 'perl-cleaner' to run this step."
	fi

	echo "rebuilding packages which require it"
	revdep-rebuild -q

	echo "The following packages are unused and could be removed."
	emerge -qp --depclean

	echo "Autoupdating config"
	if [ -n "$(which etc-update)" ]
	then
		etc-update -p -q
	else
		echo "emerge etc-update to allow (some) auto-updating of config"
	fi
fi

echo "Finally, news:"
eselect news read --quiet new

echo "emerge-sync ran successfully"
